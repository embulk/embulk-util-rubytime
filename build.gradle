apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "signing"

group = "org.embulk"
archivesBaseName = "${project.name}"
version = "0.3.1-SNAPSHOT"
description "Almost Ruby-compatible date-time processor for Embulk and Embulk plugins"

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    crubyTestImplementation {
        extendsFrom testImplementation
    }
    crubyTestRuntime {
        extendsFrom testRuntime
    }
    jruby9_1_15TestImplementation {
        extendsFrom testImplementation
    }
    jruby9_1_15TestRuntime {
        extendsFrom testRuntime
    }
    jruby9_1_17TestImplementation {
        extendsFrom testImplementation
    }
    jruby9_1_17TestRuntime {
        extendsFrom testRuntime
    }
    jruby9_2_0TestImplementation {
        extendsFrom testImplementation
    }
    jruby9_2_0TestRuntime {
        extendsFrom testRuntime
    }
    jruby9_2_9TestImplementation {
        extendsFrom testImplementation
    }
    jruby9_2_9TestRuntime {
        extendsFrom testRuntime
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.2"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.5.2"

    jruby9_1_15TestImplementation "org.jruby:jruby-complete:9.1.15.0"
    jruby9_1_17TestImplementation "org.jruby:jruby-complete:9.1.17.0"
    jruby9_2_0TestImplementation "org.jruby:jruby-complete:9.2.0.0"
    jruby9_2_9TestImplementation "org.jruby:jruby-complete:9.2.9.0"
}

sourceSets {
    crubyTest {
        java {
            srcDir "src/crubyTest/java"
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }

    jruby9_1_15Test {
        java {
            srcDir "src/jrubyTest/java"
        }
        resources {
            srcDir "src/jrubyTest/resources"
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }

    jruby9_1_17Test {
        java {
            srcDir "src/jrubyTest/java"
        }
        resources {
            srcDir "src/jrubyTest/resources"
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }

    jruby9_2_0Test {
        java {
            srcDir "src/jrubyTest/java"
        }
        resources {
            srcDir "src/jrubyTest/resources"
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }

    jruby9_2_9Test {
        java {
            srcDir "src/jrubyTest/java"
        }
        resources {
            srcDir "src/jrubyTest/resources"
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = "UTF-8"
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    title = "${project.name} v${project.version}"
    options {
        locale = "en_US"
        encoding = "UTF-8"
        overview = "src/main/html/overview.html"
        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

task crubyTest(type: Test, description: "Runs tests with CRuby.", group: "Verification") {
    classpath = sourceSets.crubyTest.runtimeClasspath
    testClassesDirs = sourceSets.crubyTest.output.classesDirs

    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

task jruby9_1_15Test(type: Test, description: "Runs tests with JRuby 9.1.15.", group: "Verification") {
    classpath = sourceSets.jruby9_1_15Test.runtimeClasspath
    testClassesDirs = sourceSets.jruby9_1_15Test.output.classesDirs

    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

task jruby9_1_17Test(type: Test, description: "Runs tests with JRuby 9.1.17.", group: "Verification") {
    classpath = sourceSets.jruby9_1_17Test.runtimeClasspath
    testClassesDirs = sourceSets.jruby9_1_17Test.output.classesDirs

    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

task jruby9_2_0Test(type: Test, description: "Runs tests with JRuby 9.2.0.", group: "Verification") {
    classpath = sourceSets.jruby9_2_0Test.runtimeClasspath
    testClassesDirs = sourceSets.jruby9_2_0Test.output.classesDirs

    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

task jruby9_2_9Test(type: Test, description: "Runs tests with JRuby 9.2.9.", group: "Verification") {
    classpath = sourceSets.jruby9_2_9Test.runtimeClasspath
    testClassesDirs = sourceSets.jruby9_2_9Test.output.classesDirs

    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

jar {
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

sourcesJar {
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

javadocJar {
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "${project.group}"
            artifactId = "${project.name}"

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = "${project.name}"
                description = "${project.description}"
                url = "https://www.embulk.org/"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id = "dmikurube"
                        name = "Dai MIKURUBE"
                        email = "dmikurube@treasure-data.com"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk-util-rubytime.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk-util-rubytime.git"
                    url = "https://github.com/embulk/embulk-util-rubytime"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}
